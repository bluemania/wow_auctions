:mod:`pricer.sources`
=====================

.. py:module:: pricer.sources

.. autoapi-nested-parse::

   It is responsible for managing input data sources.

   It reads data from WoW interface addons and user specified sources.
   Performs basic validation and data cleaning before
   converting into normalized data tables in parquet format.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pricer.sources.create_playtime_record
   pricer.sources.generate_inventory
   pricer.sources.generate_auction_scandata
   pricer.sources.generate_auction_activity
   pricer.sources.generate_booty_data


.. data:: chained_assignment
   

   

.. data:: logger
   

   

.. function:: create_playtime_record(test: bool = False, run_dt: dt = None, clean_session: bool = False, played: str = '', level_time: str = '') -> None

   Preserves record of how we are spending time on our auction character.

   We record info such as time played (played) or spent leveling (level_time)
   This is useful for calcs involving real time vs game time,
   therefore gold earnt per hour.
   Time played may be automated in future, however we retain 'clean_session'
   as a user specified flag to indicate inventory is stable (no missing items).

   When in test mode, loading and calcs are performed but no file saves
   Otherwise, saves current analysis as intermediate, loads full, saves backup,
   append interm, and save full

   Args:
       test: when test is True, return None before any data saving
           operations occur. This preserves states for future runs.
       run_dt: The common session runtime
       clean_session: User specified flag indicating inventory is stable
       played: Ingame timelike string in '00d-00h-00m-00s' format,
           this field is a 'total time' field and is expected to relate to
           the amount of time spent on auctioning alt doing auctions
       level_time: Ingame timelike string in '00d-00h-00m-00s' format
           this field helps record instances where we've done other things
           on our auction character such as leveling, long AFK etc.

   Returns:
       None


.. function:: generate_inventory(test: bool = False, run_dt: dt = None) -> None

   Reads and reformats the Arkinventory data file into a pandas dataframe.

   Loads yaml files to specify item locations and specific items of interest
   Saves down parquet file ready to go

   When in test mode, loading and calcs are performed but no file saves
   Otherwise, saves current analysis as intermediate and loads full
   If the data has updated since last run; save backup, append interm, save full

   Args:
       test: when test is True, return None before any data saving
           operations occur. This preserves states for future runs.
       run_dt: The common session runtime

   Returns:
       None


.. function:: generate_auction_scandata(test: bool = False) -> None

   Snapshot of all AH prices from latest scan.

       Reads the raw scandata from both accounts, cleans and pulls latest only
       Saves latest scandata to intermediate and adds to a full database with backup

   Args:
       test: when test is True, return None before any data saving
           operations occur. This preserves states for future runs.

   Returns:
       None


.. function:: generate_auction_activity(test: bool = False) -> None

   Generates auction history parquet file with auctions of interest.

       Reads and parses Beancounter auction history across all characters
       Works the data into a labelled and cleaned pandas before parquet saves

   Args:
       test: when test is True, return None before any data saving
           operations occur. This preserves states for future runs.

   Returns:
       None


.. function:: generate_booty_data() -> None

   Get and save booty bay data.


