:mod:`pricer.sources`
=====================

.. py:module:: pricer.sources

.. autoapi-nested-parse::

   It is responsible for managing input data sources.

   It reads data from WoW interface addons and user specified sources.
   Performs basic validation and data cleaning before
   converting into normalized data tables in parquet format.
   When functions are run in test mode, no data is saved.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pricer.sources.create_playtime_record
   pricer.sources.generate_inventory
   pricer.sources.generate_auction_scandata
   pricer.sources.generate_auction_activity
   pricer.sources.generate_booty_data


.. data:: chained_assignment
   

   

.. data:: logger
   

   

.. function:: create_playtime_record(test: bool = False, run_dt: dt = None, clean_session: bool = False, played: str = '', level_time: str = '') -> None

   Preserves record of how we are spending time on our auction character.

   We record info such as time played (played) or spent leveling (level_time)
   This is useful for calcs involving real time vs game time,
   therefore gold earnt per hour.
   Time played may be automated in future, however we retain 'clean_session'
   as a user specified flag to indicate inventory is stable (no missing items).

   When in test mode, loading and calcs are performed but no file saves
   Otherwise, saves current analysis as intermediate, loads full, saves backup,
   append interm, and save full

   Args:
       test: when True prevents data saving (early return)
       run_dt: The common session runtime
       clean_session: User specified flag indicating inventory is stable
       played: Ingame timelike string in '00d-00h-00m-00s' format,
           this field is a 'total time' field and is expected to relate to
           the amount of time spent on auctioning alt doing auctions
       level_time: Ingame timelike string in '00d-00h-00m-00s' format
           this field helps record instances where we've done other things
           on our auction character such as leveling, long AFK etc.

   Returns:
       None


.. function:: generate_inventory(test: bool = False, run_dt: dt = None) -> None

   Read and clean Arkinventory addon data, and save to parquet.

   For all characters on all user specified accounts, collates info on
   monies and inventory. Uses general settings to determine which slots
   are examined (e.g. mailbox, backpack, auction, bank).

   Args:
       test: when True prevents data saving (early return)
       run_dt: Session runtime for data lineage timestampping

   Returns:
       None


.. function:: generate_auction_scandata(test: bool = False) -> None

   Read and clean Auctionneer addon data, and save to parquet.

   Utility function loads addon raw lua auction data from the user
   specified primary auctioning account. It cleans up and selects columns.
   Additionally filters results for the minimum price of user specified
   items of interest.

   Args:
       test: when True prevents data saving (early return)

   Returns:
       None


.. function:: generate_auction_activity(test: bool = False) -> None

   Read and clean BeanCounter addon data, and save to parquet.

   For all characters on all user specified accounts, collates info on
   auction history in terms of failed/succesful sales, and purchases made.
   Works the data into a labelled and cleaned pandas before parquet saves

   Args:
       test: when True prevents data saving (early return)

   Returns:
       None


.. function:: generate_booty_data() -> None

   Read BootyBay data (through proxy addon), and save to parquet.

   Temporary process to obtain Booty Bay data through a custom
   Addon which can interact with Booty Bay data while in-game.
   Function intended to be depreciated before release.


